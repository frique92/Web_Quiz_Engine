type: edu
custom_name: stage5
files:
- name: test/tests/TestHelper.java
  visible: false
  text: |
    package tests;

    import com.google.gson.*;
    import org.apache.http.HttpHeaders;
    import org.apache.http.entity.ContentType;
    import org.hyperskill.hstest.v6.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.v6.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.v6.testcase.CheckResult;

    import java.nio.charset.StandardCharsets;
    import java.util.Base64;
    import java.util.Map;
    import java.util.function.BiFunction;

    import static org.hyperskill.hstest.v6.mocks.web.request.HttpRequestExecutor.packUrlParams;

    class WrongAnswer extends RuntimeException {
        public WrongAnswer(String msg) {
            super(msg);
        }
    }

    class HttpResp {
        private String url;
        private String method;
        private HttpResponse resp;

        HttpResp(HttpResponse resp, String url, String method) {
            this.url = url;
            this.resp = resp;
            this.method = method;
        }

        public String getUrl() {
            return url;
        }

        public String getMethod() {
            return method;
        }

        public String getRequest() {
            return getMethod() + " " + getUrl();
        }

        public int getStatusCode() {
            return resp.getStatusCode();
        }

        public Map<String, String> getHeaders() {
            return resp.getHeaders();
        }

        public byte[] getRawContent() {
            return resp.getRawContent();
        }

        public String getContent() {
            return resp.getContent();
        }

        public JsonElement getJson() {
            return resp.getJson();
        }
    }

    public class TestHelper {
        // Function just to be able to throw WrongAnswer
        // as the way to fail the test
        static <T> BiFunction<String, T, CheckResult> wrap(
            BiFunction<String, T, CheckResult> original) {

            return (r, a) -> {
                try {
                    return original.apply(r, a);
                } catch (WrongAnswer ex) {
                    return CheckResult.FALSE(ex.getMessage());
                }
            };
        }

        static void checkStatusCode(HttpResp resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkHeader(HttpResp resp, String header, String value) {
            Map<String, String> headers = resp.getHeaders();
            if (!headers.containsKey(header)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\", " +
                        "but this header is not found in the response."
                );
            }
            String actualValue = headers.get(header);
            if (!actualValue.equals(value)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\" being " +
                        "equal to " + value + " but in the response header " +
                        "\"Content-Type\" is equal to " + actualValue + "."
                );
            }
        }

        static JsonElement getJson(HttpResp resp) {
            checkHeader(resp,
                HttpHeaders.CONTENT_TYPE,
                ContentType.APPLICATION_JSON.getMimeType()
            );
            try {
                return resp.getJson();
            } catch (Exception ex) {
                throw new WrongAnswer(
                    resp.getRequest() + " should return a valid JSON"
                );
            }
        }

        static JsonElement getJson(String json) {
            return new JsonParser().parse(json);
        }

        static private String constructUrl(String address) {
            if (!address.startsWith("/")) {
                address = "/" + address;
            }
            return "http://localhost:8889" + address;
        }

        static HttpRequest post(String address, Map<String, String> params) {
            return new HttpRequest("POST")
                .setUri(constructUrl(address))
                .setContent(packUrlParams(params))
                .setContentType(ContentType.APPLICATION_FORM_URLENCODED);
        }

        static HttpRequest put(String address, Map<String, String> params) {
            return new HttpRequest("PUT")
                .setUri(constructUrl(address))
                .setContent(packUrlParams(params))
                .setContentType(ContentType.APPLICATION_FORM_URLENCODED);
        }

        static HttpRequest auth(HttpRequest req, String login, String pass) {
            String headerKey = "Authorization";
            String beforeEncoding = login + ":" + pass;
            String afterEncoding = new String(
                Base64.getEncoder().encode(beforeEncoding.getBytes())
            );
            String headerValue = "Basic " + afterEncoding;
            req.addHeader(headerKey, headerValue);
            return req;
        }
    }
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.v6.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.v6.stage.SpringTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.reflect.Method;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.function.BiFunction;

    import static org.hyperskill.hstest.v6.common.ReflectionUtils.getMainMethod;
    import static tests.TestHelper.*;
    import static tests.ApiTester.*;

    public class WebQuizEngineTest extends SpringTest {

        public WebQuizEngineTest() {
            super(WebQuizEngine.class, 8889);
        }

        @BeforeClass
        public static void replaceDatabase() {
            String dbFilePath = System.getProperty("user.dir")
                + File.separator + "../quizdb.mv.db";

            String dbTempFilePath = dbFilePath + "-real";

            Path dbFile = Paths.get(dbFilePath);
            Path dbTempFile = Paths.get(dbTempFilePath);

            try {
                if (dbFile.toFile().isFile() && !dbTempFile.toFile().exists()) {
                    Files.move(dbFile, dbTempFile);
                }
            } catch (IOException ignored) { }
        }

        @AfterClass
        public static void revertDatabase() throws Exception {
            Thread.sleep(1000);

            String dbFilePath = System.getProperty("user.dir")
                + File.separator + "../quizdb.mv.db";

            String dbTempFilePath = dbFilePath + "-real";

            Path dbFile = Paths.get(dbFilePath);
            Path dbTempFile = Paths.get(dbTempFilePath);

            try {
                Files.deleteIfExists(dbFile);
                if (dbTempFile.toFile().isFile()) {
                    Files.move(dbTempFile, dbFile);
                }
            } catch (IOException ignored) { }
        }

        private static String quiz1 =
            "{\n" +
            "  \"title\": \"The Java Logo\", \n" +
            "  \"text\": \"What is depicted on the Java logo?\",\n" +
            "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
            "  \"answer\": [2]\n" +
            "}";

        private static String quiz2 =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String quiz3 =
            "{\n" +
            "  \"title\": \"Math1\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
            "  \"answer\": [0,1]\n" +
            "}";

        private static String quiz4 =
            "{\n" +
            "  \"title\": \"Math2\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
            "  \"answer\": [1,3]\n" +
            "}";

        private static String quiz5 =
            "{\n" +
            "  \"title\": \"Math3\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
            "  \"answer\": []\n" +
            "}";

        private static String quiz6 =
            "{\n" +
            "  \"title\": \"Math4\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
            "}";

        private static String quiz7 =
            "{\n" +
            "  \"title\": \"Math5\",\n" +
            "  \"text\": \"Which of the following is equal to 4?\",\n" +
            "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
            "  \"answer\": [0,1,3]\n" +
            "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyTitle =
            "{\n" +
            "  \"title\": \"\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400noText =
            "{\n" +
            "  \"title\": \"123123123\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyText =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"\",\n" +
            "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400noOptions =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"123123123\",\n" +
            "  \"answer\": [1]\n" +
            "}";

        private static String error400emptyOptions =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [ ]\n" +
            "  \"answer\": [ ]\n" +
            "}";

        private static String error400oneOption =
            "{\n" +
            "  \"title\": \"The Ultimate Question\",\n" +
            "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
            "  \"options\": [\"Everything goes right\"]\n" +
            "  \"answer\": [0]\n" +
            "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return TestHelper.auth(req, login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        private List<TestCase> generateStringTests() {
            BiFunction[] lambdasForTests = new BiFunction[] {
                // Test login
                (r, a) -> testRegister(login1, pass1, 200),
                (r, a) -> testRegister(login2, pass2, 200),
                (r, a) -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
                (r, a) -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
                (r, a) -> testRegister(loginExist_login, loginExist_pass, 400),
                (r, a) -> testRegister(shortPassword_login, shortPassword_pass, 400),
                (r, a) -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


                // Add 2 quizzes and check their existence
                (r, a) -> testAllQuizzes(0, 1),
                (r, a) -> testAllQuizzes(0, 2),

                (r, a) -> testCreateQuiz(0, 1),
                (r, a) -> testQuizExists(0, 2),
                (r, a) -> testQuizNotExists(0, 2, 125),

                (r, a) -> testAllQuizzes(1, 1),

                (r, a) -> testCreateQuiz(1, 2),
                (r, a) -> testQuizExists(1, 2),
                (r, a) -> testQuizNotExists(1, 2, 125),

                (r, a) -> testAllQuizzes(2, 2),


                // No auth operations tests
                (r, a) -> testAllQuizzesNoAuth(),
                (r, a) -> testCreateQuizNoAuth(1),
                (r, a) -> testCreateQuizNoAuth(2),
                (r, a) -> testSolveQuizNoAuth(quizIds[0], "[0]"),
                (r, a) -> testSolveQuizNoAuth(quizIds[1], "[1]"),
                (r, a) -> testDeleteQuizzesNoAuth(quizIds[0]),
                (r, a) -> testDeleteQuizzesNoAuth(quizIds[1]),


                // Fake auth operations tests
                (r, a) -> testAllQuizzesFakeAuth(),
                (r, a) -> testCreateQuizFakeAuth(1),
                (r, a) -> testCreateQuizFakeAuth(2),
                (r, a) -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
                (r, a) -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
                (r, a) -> testDeleteQuizzesFakeAuth(quizIds[0]),
                (r, a) -> testDeleteQuizzesFakeAuth(quizIds[1]),


                // Solve two quizzes
                (r, a) -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

                (r, a) -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[1], "[1]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[1], "[2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[1], "[3]", false, 1),


                // Test database save
                (r, a) -> testAllQuizzes(2, 1),
                (r, a) -> testAllQuizzes(2, 2),
                (r, a) -> reloadServer(),
                (r, a) -> testAllQuizzes(2, 1),
                (r, a) -> testAllQuizzes(2, 2),
                (r, a) -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[0], "[3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[1], "[1]", true, 2),


                // Test wrongly created quizzes
                (r, a) -> addIncorrectQuiz(error400noTitle, 1),
                (r, a) -> addIncorrectQuiz(error400emptyTitle, 2),
                (r, a) -> addIncorrectQuiz(error400noText, 1),
                (r, a) -> addIncorrectQuiz(error400emptyText, 2),
                (r, a) -> addIncorrectQuiz(error400noOptions, 1),
                (r, a) -> addIncorrectQuiz(error400emptyOptions, 2),
                (r, a) -> addIncorrectQuiz(error400oneOption, 1),


                // Test multiple answers
                (r, a) -> testCreateQuiz(2, 1),
                (r, a) -> testQuizExists(2, 1),
                (r, a) -> testQuizNotExists(2, 1, 125),
                (r, a) -> checkQuizSuccess(quizIds[2], "[]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

                (r, a) -> testCreateQuiz(3, 1),
                (r, a) -> testQuizExists(3, 1),
                (r, a) -> testQuizNotExists(3, 1, 125),
                (r, a) -> checkQuizSuccess(quizIds[3], "[]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

                (r, a) -> testCreateQuiz(4, 1),
                (r, a) -> testQuizExists(4, 1),
                (r, a) -> testQuizNotExists(4, 1, 125),
                (r, a) -> checkQuizSuccess(quizIds[4], "[]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

                (r, a) -> testCreateQuiz(5, 1),
                (r, a) -> testQuizExists(5, 1),
                (r, a) -> testQuizNotExists(5, 1, 125),
                (r, a) -> checkQuizSuccess(quizIds[5], "[]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

                (r, a) -> testCreateQuiz(6, 1),
                (r, a) -> testQuizExists(6, 1),
                (r, a) -> testQuizNotExists(6, 1, 125),
                (r, a) -> checkQuizSuccess(quizIds[6], "[]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

                (r, a) -> testAllQuizzes(7, 2),
                (r, a) -> reloadServer(),
                (r, a) -> testAllQuizzes(7, 2),
                (r, a) -> checkQuizSuccess(quizIds[5], "[]", true, 1),
                (r, a) -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
                (r, a) -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


                // Test delete
                (r, a) -> testDelete(quizIds[0], 1, 204),
                (r, a) -> testDelete(quizIds[0], 1, 404),
                (r, a) -> testQuizNotExists(0, 1, 0),
                (r, a) -> testQuizNotExists(0, 2, 0),
                (r, a) -> testQuizExists(1, 1),
                (r, a) -> testQuizExists(1, 2),

                (r, a) -> testDelete(quizIds[1], 1, 403),
                (r, a) -> testDelete(quizIds[1], 1, 403),
                (r, a) -> testDelete(quizIds[1], 2, 204),
                (r, a) -> testDelete(quizIds[1], 2, 404),
                (r, a) -> testDelete(quizIds[1], 1, 404),
                (r, a) -> testQuizNotExists(0, 1, 0),
                (r, a) -> testQuizNotExists(0, 2, 0),
                (r, a) -> testQuizNotExists(1, 1, 0),
                (r, a) -> testQuizNotExists(1, 2, 0),

                (r, a) -> testAllQuizzes(5, 1),
                (r, a) -> reloadServer(),
                (r, a) -> testAllQuizzes(5, 2),
                (r, a) -> testQuizNotExists(0, 1, 0),
                (r, a) -> testQuizNotExists(0, 2, 0),
                (r, a) -> testQuizNotExists(1, 1, 0),
                (r, a) -> testQuizNotExists(1, 2, 0)
            };

            List<TestCase> tests = new ArrayList<>();
            for (BiFunction func : lambdasForTests) {
                tests.add(new TestCase<>().setCheckFunc(wrap(func)));
            }
            return tests;
        }

        @Override
        public List<TestCase> generate() {
            return generateStringTests();
        }

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResp resp = new HttpResp(req.send(), url, "POST");

            checkStatusCode(resp, status);
            return CheckResult.TRUE;
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(req.send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");;
            HttpResp resp = new HttpResp(req.send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "POST");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResp resp = new HttpResp(get(url).send(), url, "GET");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResp resp = new HttpResp(auth(get(url), 3).send(), url, "GET");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(req.send(), url, "DELETE");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(auth(req, 3).send(), url, "DELETE");
            checkStatusCode(resp, 401);
            return CheckResult.TRUE;
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "id");

            JsonObject obj = json.getAsJsonObject();
            checkIsInt(resp, obj.get("id"), "id");

            quizIds[quizNum] = obj.get("id").getAsInt();

            return CheckResult.TRUE;
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpRequest req = get(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "GET");

            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            JsonElement json = getJson(resp);
            checkIsObject(resp, json);
            checkObjectKey(resp, json, "id");
            checkObjectKey(resp, json, "title");
            checkObjectKey(resp, json, "text");
            checkObjectKey(resp, json, "options");

            JsonObject obj = json.getAsJsonObject();
            checkIsInt(resp, obj.get("id"), "id");
            checkIsString(resp, obj.get("title"), "title");
            checkIsString(resp, obj.get("text"), "text");
            checkIsArray(resp, obj.get("options"), "options");

            checkIntValue(resp, obj.get("id"), quizId, "id");

            if (!rightQuiz.equals(obj)) {
                return CheckResult.FALSE(
                    "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(obj)
                );
            }

            return CheckResult.TRUE;
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);

            HttpRequest req = get(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "GET");

            checkStatusCode(resp, 404);

            return CheckResult.TRUE;
        }

        private CheckResult testAllQuizzes(int count, int user) {
            String url = "/api/quizzes";
            HttpResp resp = new HttpResp(auth(get(url), user).send(), url, "GET");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsArray(resp, json);
            checkArrayLength(resp, json, count);

            JsonArray arr = json.getAsJsonArray();
            int index = 0;
            for (JsonElement elem : arr) {
                checkIsObject(resp, elem, "json[" + index + "]");
                ++index;
            }

            return CheckResult.TRUE;
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");

            checkStatusCode(resp, 200);
            JsonElement json = getJson(resp);

            checkIsObject(resp, json);
            checkObjectKey(resp, json, "success");
            checkObjectKey(resp, json, "feedback");

            JsonObject obj = json.getAsJsonObject();

            checkIsBoolean(resp, obj.get("success"), "success");
            checkIsString(resp, obj.get("feedback"), "feedback");

            checkBooleanValue(resp, obj.get("success"), shouldResponse, "success");

            return CheckResult.TRUE;
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "POST");
            checkStatusCode(resp, 400);
            return CheckResult.TRUE;
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResp resp = new HttpResp(auth(req, user).send(), url, "DELETE");
            checkStatusCode(resp, status);
            return CheckResult.TRUE;
        }

        private CheckResult reloadServer() {
            stopSpring();
            try {
                Thread.sleep(1000);
                Method mainMethod = getMainMethod(WebQuizEngine.class);
                mainMethod.invoke(null, new Object[] { new String[0] });
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: test/tests/ApiTester.java
  visible: false
  text: |
    package tests;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;

    import static java.lang.Math.abs;

    public class ApiTester {

        private static void checkJson(
            boolean passed,
            HttpResp resp,
            JsonElement json,
            String path,
            String should) {

            if (!passed) {
                if (path.length() != 0) {
                    path = " in the JSON in path \"" + path + "\"";
                }
                throw new WrongAnswer(
                    resp.getRequest() + " should " + should + path +
                        ".\nFound: \n\n" + getPrettyJson(json)
                );
            }
        }

        static String getPrettyJson(JsonElement json) {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(json);
        }


        // ========== Object

        static void checkIsObject(HttpResp resp, JsonElement json) {
            checkIsObject(resp, json, "");
        }

        static void checkIsObject(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonObject(), resp, json, path, "contain a JSON object");
        }


        // ========== Array

        static void checkIsArray(HttpResp resp, JsonElement json) {
            checkIsArray(resp, json, "");
        }

        static void checkIsArray(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonArray(), resp, json, path, "contain a JSON array");
        }


        // ========== Null

        static void checkIsNull(HttpResp resp, JsonElement json) {
            checkIsNull(resp, json, "");
        }

        static void checkIsNull(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonNull(), resp, json, path, "be equal to a null");
        }


        // ========== String

        static void checkIsString(HttpResp resp, JsonElement json) {
            checkIsString(resp, json, "");
        }

        static void checkIsString(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isString(),
                resp, json, path, "contain a string");
        }

        static void checkStringValue(HttpResp resp, JsonElement json, String value, String path) {
            checkIsString(resp, json, path);
            checkJson(json.getAsString().equals(value), resp, json, path, "be equal to \"" + value + "\"");
        }


        // ========== Boolean

        static void checkIsBoolean(HttpResp resp, JsonElement json) {
            checkIsBoolean(resp, json, "");
        }

        static void checkIsBoolean(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isBoolean(),
                resp, json, path, "contain a boolean");
        }

        static void checkBooleanValue(HttpResp resp, JsonElement json, boolean value, String path) {
            checkIsBoolean(resp, json, path);
            checkJson(json.getAsBoolean() == value, resp, json, path, "be equal to " + value);
        }


        // ========== Int

        static void checkIsInt(HttpResp resp, JsonElement json) {
            checkIsInt(resp, json, "");
        }

        static void checkIsInt(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsInt();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a number");
            }
        }

        static void checkIntValue(HttpResp resp, JsonElement json, int value, String path) {
            checkIsInt(resp, json, path);
            checkJson(json.getAsInt() == value, resp, json, path, "be equal to " + value);
        }


        // ========= Double

        static void checkIsDouble(HttpResp resp, JsonElement json) {
            checkIsDouble(resp, json, "");
        }

        static void checkIsDouble(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsDouble();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a floating-point number");
            }
        }

        static void checkDoubleValue(HttpResp resp, JsonElement json, double value, String path) {
            checkIsDouble(resp, json, path);
            checkJson(abs(json.getAsDouble() - value) < 1e-6, resp, json, path, "be equal to " + value);
        }


        // ========== ObjectKey

        static void checkObjectKey(HttpResp resp, JsonElement json, String key) {
            checkObjectKey(resp, json, key, "");
        }

        static void checkObjectKey(HttpResp resp, JsonElement json, String key, String path) {
            checkIsObject(resp, json, path);
            checkJson(json.getAsJsonObject().has(key),
                resp, json, path, "contain a key \"" + key + "\" in object");
        }


        // ========== ArrayLength

        static void checkArrayLength(HttpResp resp, JsonElement json, int length) {
            checkArrayLength(resp, json, length, "");
        }

        static void checkArrayLength(HttpResp resp, JsonElement json, int length, String path) {
            checkIsArray(resp, json, path);
            checkJson(json.getAsJsonArray().size() == length,
                resp, json, path, "contain a JSON array with length " + length);
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/91/stages/508/implement
status: Unchecked
record: -1
